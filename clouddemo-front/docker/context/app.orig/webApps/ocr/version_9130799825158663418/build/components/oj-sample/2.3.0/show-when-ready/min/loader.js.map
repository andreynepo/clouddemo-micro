{"version":3,"sources":["text!oj-sample/show-when-ready/show-when-ready-view.html","show-when-ready/resources/nls/show-when-ready-strings.js","show-when-ready/show-when-ready-viewModel.js","text!oj-sample/show-when-ready/component.json","css!oj-sample/show-when-ready/show-when-ready-styles","show-when-ready/loader.js","../../../../../../../../../../../../../onLayerEnd0.js"],"names":["define","root","Context","ko","componentStrings","ShowWhenReadyComponentModel","context","self","this","composite","element","loggingIdentity","uniqueId","slotWrapperSubId","properties","res","ojsampleShowWhenReady","externalReadyFlag","observable","ready","shownAtLeastOnce","allReady","pureComputed","isVBCSDT","loadState","_setLoadState","displayControl","loadingImage","loadingAltText","pageLoading","slotCounts","loading","_patchLoadingImage","imageSource","translations","_detectDTMode","prototype","connected","refresh","disconnected","propertyChanged","updatedFrom","property","value","newReadyState","getPageContext","getBusyContext","whenReady","then","undefined","state","existingState","setProperty","image","length","require","toUrl","component","getAttribute","Composite","view","viewModel","metadata","register","JSON","parse","c","d","document","a","i","s","createElement","type","getElementsByTagName","cssText","createTextNode"],"mappings":"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","file":"loader.js","sourcesContent":["\ndefine('text!oj-sample/show-when-ready/show-when-ready-view.html',[],function () { return '<!--\\n  show-when-ready\\n  Copyright (c) 2019, Oracle and/or its affiliates.\\n  The Universal Permissive License (UPL), Version 1.0\\n-->\\n<oj-bind-if test=\"[[!allReady()]]\">\\n  <oj-bind-slot name=\"loading\">\\n    <div class=\"oj-flex oj-sm-flex-items-initial oj-sm-justify-content-center\">\\n      <div class=\"oj-flex-item\"><img :src=\"[[loadingImage]]\" :alt=\"[[loadingAltText]]\" width=\"48\" height=\"48\" /></div>\\n    </div>\\n  </oj-bind-slot>\\n</oj-bind-if>\\n<oj-bind-if test=\"[[isVBCSDT()]]\">\\n  <div class=\"show-when-ready-designtime-marker oj-flex oj-sm-flex-items-initial oj-sm-justify-content-center\">\\n    <div class=\"oj-flex-item\">\\n      <span>\\n        <oj-bind-text value=\"[[res.designTimeMarker]]\"></oj-bind-text>\\n      </span>\\n    </div>\\n  </div>\\n</oj-bind-if>\\n<div :id=\"[[slotWrapperSubId]]\" :style.display=\"[[displayControl]]\">\\n  <oj-bind-if test=\"[[shownAtLeastOnce()]]\">\\n    <oj-bind-slot></oj-bind-slot>\\n  </oj-bind-if>\\n</div>';});\n\n","/* Copyright 2019, Oracle and/or its affiliates. All rights reserved. */\n/*\n * Standard String resources used within the component\n */\ndefine('oj-sample/show-when-ready/resources/nls/show-when-ready-strings',{\n  \"root\": true\n});\n\n","/**\n  Copyright (c) 2019, Oracle and/or its affiliates.\n  The Universal Permissive License (UPL), Version 1.0\n*/\n'use strict';\ndefine(\n    'oj-sample/show-when-ready/show-when-ready-viewModel',['ojs/ojcontext', 'knockout', 'ojL10n!./resources/nls/show-when-ready-strings'], function (Context, ko, componentStrings) {\n\n        function ShowWhenReadyComponentModel(context) {\n            var self = this;\n            self.composite = context.element;\n            self.loggingIdentity = 'oj-sample-show-when-ready (' + context.uniqueId + '): ';\n            self.slotWrapperSubId = context.uniqueId + '-content';\n            self.properties = context.properties;\n\n            self.res = componentStrings.ojsampleShowWhenReady;\n\n            //Display control\n            self.externalReadyFlag = ko.observable(self.properties.ready);\n            self.shownAtLeastOnce = ko.observable(self.properties.ready ? true : false);\n            self.allReady = ko.pureComputed(function () {\n                if (self.isVBCSDT()) {\n                    return true;\n                }\n                else {\n                    if (self.properties.loadState !== 'timeout') {\n                        if (self.externalReadyFlag()) {\n                            self._setLoadState('ready');\n                            return true;\n                        }\n                        else {\n                            self._setLoadState('loading');\n                            return false;\n\n                        }\n                    }\n                    else {\n                        return false;\n                    }\n                }\n            }\n            );\n\n            self.displayControl = ko.pureComputed(function () {\n                return self.allReady() ? 'block' : 'none';\n            });\n\n            // Setup the loading image if there is not an override from the user\n            self.loadingImage = ko.observable();\n            self.loadingAltText = ko.observable(self.res.pageLoading);\n            if (!context.slotCounts.loading) {\n                self._patchLoadingImage(context.properties.imageSource);\n                if (context.properties.translations.pageLoading) {\n                    self.loadingAltText(context.properties.translations.pageLoading);\n                }\n            }\n\n            self.isVBCSDT = ko.observable(self._detectDTMode(context.element));\n\n        };\n\n        ShowWhenReadyComponentModel.prototype.connected = function (context) {\n            var self = this;\n            self.refresh();\n        };\n\n        ShowWhenReadyComponentModel.prototype.disconnected = function (context) {\n            var self = this;\n            self._setLoadState('unmonitored');\n        };\n\n        ShowWhenReadyComponentModel.prototype.propertyChanged = function (context) {\n            var self = this;\n            if (context.updatedFrom === 'external') {\n                switch (context.property) {\n                    case 'ready':\n                        self.refresh(context.value);\n                        break;\n                    case 'imageSource':\n                        self._patchLoadingImage(value);\n                        break;\n                    case 'translations':\n                        self.loadingAltText(value.pageLoading);\n                        break;\n                }\n            }\n        };\n\n        ShowWhenReadyComponentModel.prototype.refresh = function (newReadyState) {\n            var self = this;\n            //self._setLoadState('loading');\n            self.isVBCSDT(self._detectDTMode(self.composite));\n            var busyContext = Context.getPageContext().getBusyContext();\n            busyContext.whenReady().then(function () {\n                if (newReadyState !== undefined) {\n                    if (!self.shownAtLeastOnce() && newReadyState) {\n                        self.shownAtLeastOnce(true);\n                    }\n                    self.externalReadyFlag(newReadyState);\n                }\n            });\n        }\n\n        ShowWhenReadyComponentModel.prototype._setLoadState = function (state) {\n            var self = this;\n            var existingState = self.properties.loadState;\n            if (!existingState || existingState !== state) {\n                self.properties.setProperty('loadState', state);\n            }\n        }\n\n        ShowWhenReadyComponentModel.prototype._patchLoadingImage = function (image) {\n            var self = this;\n            if (image && image.length > 0) {\n                self.loadingImage(image);\n            }\n            else {\n                self.loadingImage(require.toUrl('oj-sample/show-when-ready/resources/images/spinner_full.gif'));\n            }\n        };\n\n        ShowWhenReadyComponentModel.prototype._detectDTMode = function (component) {\n            if (component.getAttribute('data-vbdt-component')) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        };\n        return ShowWhenReadyComponentModel;\n    });\n","\ndefine('text!oj-sample/show-when-ready/component.json',[],function () { return '{\\r\\n  \"name\": \"show-when-ready\",\\r\\n  \"pack\": \"oj-sample\",\\r\\n  \"displayName\": \"Show When Ready\",\\r\\n  \"description\": \"Component that shows a busy indicator until the page is ready and then displays its contents\",\\r\\n  \"license\": \"https://opensource.org/licenses/UPL\",\\r\\n  \"version\": \"2.0.1\",\\r\\n  \"jetVersion\": \">=6.1.0 <8.0.0\",\\r\\n  \"icon\": {\\r\\n    \"iconPath\": \"extension/images/cca-show-when-ready.svg\",\\r\\n    \"selectedIconPath\": \"extension/images/cca-show-when-ready.svg\",\\r\\n    \"hoverIconPath\": \"extension/images/cca-show-when-ready-ovr.svg\"\\r\\n  },\\r\\n  \"properties\": {\\r\\n    \"ready\": {\\r\\n      \"displayName\": \"Control Variable\",\\r\\n      \"description\": \"To control the display of the content you will need to set a boolean flag that should be switched to true when the content should be displayed. This will be combined with the existing busyState of the page to decide when the content should be made visible\",\\r\\n      \"required\": true,\\r\\n      \"type\": \"boolean\",\\r\\n      \"value\": false\\r\\n    },\\r\\n    \"imageSource\": {\\r\\n      \"displayName\": \"Loading Image Source\",\\r\\n      \"description\": \"Allows you to replace the default animated loading image with one of your own image which will be sized to 48 x 48 px. Alternatively, the loading slot can be used to create a totally custom loading UI.\",\\r\\n      \"type\": \"string\"\\r\\n    },\\r\\n    \"translations\": {\\r\\n      \"displayName\": \"Message Overrides\",\\r\\n      \"type\": \"object\",\\r\\n      \"value\": {},\\r\\n      \"description\": \"Allows the customization of hints and error messages used by the component.\",\\r\\n      \"properties\": {\\r\\n        \"pageLoading\": {\\r\\n          \"description\": \"Override of the alt-text on the loading image.\",\\r\\n          \"type\": \"string\"\\r\\n        }\\r\\n      }\\r\\n    },\\r\\n    \"loadState\": {\\r\\n      \"description\": \"A read-only property that will be set with a status indicating the current state if the control.\",\\r\\n      \"displayName\": \"Page state?\",\\r\\n      \"type\": \"string\",\\r\\n      \"enumValues\": [\\r\\n        \"loading\",\\r\\n        \"ready\",\\r\\n        \"timeout\",\\r\\n        \"unmonitored\"\\r\\n      ],\\r\\n      \"propertyEditorValues\": {\\r\\n        \"loading\": {\\r\\n          \"description\": \"The page is not yet ready\"\\r\\n        },\\r\\n        \"ready\": {\\r\\n          \"description\": \"page is ready and main content is displayed\"\\r\\n        },\\r\\n        \"unmonitored\": {\\r\\n          \"description\": \"The control is currently hidden so state is not relevant\"\\r\\n        },\\r\\n        \"timeout\": {\\r\\n          \"description\": \"There was a timeout error whilst the page was loading\"\\r\\n        }\\r\\n      },\\r\\n      \"readOnly\": true,\\r\\n      \"writeback\": true,\\r\\n      \"propertyGroup\": \"common\"\\r\\n    }\\r\\n  },\\r\\n  \"methods\": {\\r\\n    \"refresh\": {\\r\\n      \"displayName\": \"Refresh\",\\r\\n      \"description\": \"Causes the component to re-evaluate its state\"\\r\\n    }\\r\\n  },\\r\\n  \"slots\": {\\r\\n    \"\": {\\r\\n      \"displayName\": \"Contents\",\\r\\n      \"description\": \"The contents of this slot will be hidden whilst the page is loading and then revealed once the page is ready\"\\r\\n    },\\r\\n    \"loading\": {\\r\\n      \"displayName\": \"Alternate loading screen\",\\r\\n      \"description\": \"Can be used to replace the simple centered image that is displayed by default with custom content\"\\r\\n    }\\r\\n  },\\r\\n  \"extension\": {\\r\\n    \"catalog\": {\\r\\n      \"category\": \"Sample Components\",\\r\\n      \"tags\": [\\r\\n        \"VBCS\",\\r\\n        \"Form Factor: Web\",\\r\\n        \"Form Factor: Tablet\",\\r\\n        \"Form Factor: mobile\"\\r\\n      ],\\r\\n      \"coverImage\": \"extension/images/cca-show-when-ready.svg\"\\r\\n    },\\r\\n    \"vbdt\": {\\r\\n      \"pi\": {\\r\\n        \"layouts\": {\\r\\n          \"general\": {\\r\\n            \"customizers\": [\\r\\n              {\\r\\n                \"propertyName\": \"ready\",\\r\\n                \"type\": \"default-string\"\\r\\n              },\\r\\n              {\\r\\n                \"propertyName\": \"imageSource\",\\r\\n                \"type\": \"image\"\\r\\n              }\\r\\n            ]\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}';});\n\n","\ndefine('css!oj-sample/show-when-ready/show-when-ready-styles',[],function(){});\n","/**\n  Copyright (c) 2019, Oracle and/or its affiliates.\n  The Universal Permissive License (UPL), Version 1.0\n*/\ndefine('oj-sample/show-when-ready/loader',['ojs/ojcomposite', 'text!./show-when-ready-view.html', './show-when-ready-viewModel', 'text!./component.json','css!./show-when-ready-styles.css'],\n  function(Composite, view, viewModel, metadata) {\n    Composite.register('oj-sample-show-when-ready', {\n      view: view, \n      viewModel: viewModel, \n      metadata: JSON.parse(metadata)\n    });\n  }\n);\n","\n(function(c){var d=document,a='appendChild',i='styleSheet',s=d.createElement('style');s.type='text/css';d.getElementsByTagName('head')[0][a](s);s[i]?s[i].cssText=c:s[a](d.createTextNode(c));})\n('oj-sample-show-when-ready:not(.oj-complete){\\r\\n  visibility: hidden;\\r\\n}\\r\\n\\r\\noj-sample-show-when-ready{\\r\\n  display:inline;\\r\\n}\\r\\n\\r\\noj-sample-show-when-ready .show-when-ready-designtime-marker {\\r\\n  min-height:20px;\\r\\n  min-width:200px;\\r\\n  background-color: #dce3e4;\\r\\n  color:#5F5F5F;\\r\\n  opacity: 0.5;\\r\\n  text-align: center;\\r\\n  margin: auto;\\r\\n  padding:4px\\r\\n}');\n"]}